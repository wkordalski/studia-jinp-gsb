# Raport z review commita bf42c198be1606e5d31d55429b9a4ed5cdf934c9:

I. account.hh

1) zmienić domyślny interest_rate na 0.
Zrobione

2) domyślny konstruktor klasy Account nie ma żadnego semantycznego znaczenia
Done


3) potrzeba zaimplementować historię operacji
W trakcie

4) zastanowić czy wszystko, co jest public powinno być public, a nie protected
   W szczególności konstruktor klasy Account(id_type, id_type)
Słusznie

5) przy virtual'nym dziedziczeniu konstruktor klasy bazowej (Account) trzeba
   wywołać z najbardziej dziedziczącej klasy pochodnej (tutaj CurrencyAccount,
   CheckingAccount, SavingAccount) - inaczej zostanie wywołany konstruktor
   domyślny klasy Account.
Done

II. bank.hh

1) jaki jest sens tworzenia banku z już istniejącymi kontami?
Done

2) jeżeli zakładamy, że logiczne by było, że kiedyś zostanie dopisana funkcja
   usuwania kont, to może warto byłoby trzymać konta na mapie
3) trzymanie obiektów klasy Account nie ma sensu, jako, że dodając odpowiedni
   obiekt typu JakieśAccount, przy dodawaniu "obcinamy" go do klasy Account,
   czyli tracimy jego dodatkowe dane - warto by więc alokować konta na stercie,
   oraz trzymać w kontenerze wskaźniki na te obiekty (wskaźniki będą typu
   Account*)
Done

III. bank_application.hh

1) Analogicznie: vector vs mapa banków?

IV. currency.hh

Co będzie reprezentowała klasa Currency (ang. waluta)?
Jeśli będzie to ów enum, zawierający dostępne waluty, to:

enum class Currency {
  ENC, LIT, DIL
};


# Raport z review commita 8d73a608df1a3fe201d266cdea4f6ebd55acb403

I. accounts.hh

1) ma być: virtual const History & Account::history() const

II. bank.hh

1) ma być: XXXAccount & Bank::openXXXAccount(const Being &who);
2) brak zwracanej wartości w Bank::openXXXAccount

III. bank_application.hh

IV. currency.hh

1) nazwa money.hh jest lepsza
2) enumy podajemy do funkcji przez wartość
3) klasa Money nie może mieć konstruktora jednoargumentowego
   przyjmującego double (w tym konstruktora dwuargumentowego z domyślnym
   parametrem). Powoduje to niejednoznaczności w funkcjach jak na przykład:
   void f(double d); /* gdy domyślna waluta konta - niekoniecznie ENC */
   void f(Money m);  /* gdy podana waluta */
